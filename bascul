#!/bin/bash
set -e
# Authors:      Rodrigo Cuadra
#               with Collaboration of Jose Miguel Rivera
#
# Support:      rcuadra@aplitel.com
#
host_master=`pcs status resources | awk '/Masters/ {print $3}'`
host_slave=`pcs status resources | awk '/Slaves/ {print $3}'`

        if [ "$host_master" = "" ] ;then
		echo -e "There are problems with high availability, please check with the command "pcs status" (we recommend applying the command "pcs cluster unstandby" in both servers)"
		exit;
	fi

        if [ "$host_slave" = "" ] ;then
                echo -e "There are problems with high availability, please check with the command "pcs status" (we recommend applying the command "pcs cluster unstandby" in both servers)"
                exit;
        fi

echo -e "************************************************************"
echo -e "*     Change the roles of servers in high availability     *"
echo -e "*\e[41m WARNING-WARNING-WARNING-WARNING-WARNING-WARNING-WARNING  \e[0m*"
echo -e "*All calls in progress will be lost and the system will be *"
echo -e "*     be in an unavailable state for a few seconds.        *"
echo -e "************************************************************"
	while [[ $veryfy_bascul != yes && $veryfy_bascul != no ]]
	do
		read -p "Are you sure to switch from $host_master to $host_slave? (yes,no) > " veryfy_bascul 
	done
	if [ "$veryfy_bascul" = "yes" ] ;then
                BAR='........................................................'
                i=0
		pcs cluster unstandby $host_master
		pcs cluster unstandby $host_slave
		pcs cluster standby $host_master
		host_master_new=$host_master
		echo -e "Stopping services on " $host_master
		while [[ $host_master == $host_master_new ]]
		do
                        i=$i+1
                        echo -ne "\r${BAR:0:$i}"
			sleep 1
			host_master_new=`pcs status resources | awk '/Masters/ {print $3}'`
		done
                echo -e "Done"
                echo -e "Starting services on " $host_slave

		virtualip=`pcs status resources | awk '/virtual_ip/ {print $3}'`
               	i=0
        	while [[ $virtualip != 'Started' ]]
        	do
                        i=$i+1
                        echo -ne "\r${BAR:0:$i}"
			sleep 1
                	virtualip=`pcs status resources | awk '/virtual_ip/ {print $3}'`
        	done
		echo -e "Virtual IP: Started on " $host_slave
		echo -e "Done"

		Filesystem=`pcs status resources | awk '/DrbdFS/ {print $3}'`
		while [[ $Filesystem != 'Started' ]]
        	do
			Filesystem=`pcs status resources | awk '/DrbdFS/ {print $3}'`
        	done
		echo -e "Filesystem: Started on " $host_slave
		echo -e "Done"

		mysql=`pcs status resources | awk '/mysql/ {print $3}'`
        	while [[ $mysql != 'Started' ]]
        	do
                	mysql=`pcs status resources | awk '/mysql/ {print $3}'`
        	done
		echo -e "Mysql: Started on " $host_slave
		echo -e "Done"

		asterisk=`pcs status resources | awk '/asterisk/ {print $3}'`
        	while [[ $asterisk != 'Started' ]]
        	do
                	asterisk=`pcs status resources | awk '/asterisk/ {print $3}'`
        	done
		echo -e "Asterisk: Started on " $host_slave
		echo -e "Done"

		vpbx_monitor=`pcs status resources | awk '/vpbx-monitor/ {print $3}'`
        	while [[ $vpbx_monitor != 'Started' ]]
        	do
                	vpbx_monitor=`pcs status resources | awk '/vpbx-monitor/ {print $3}'`
        	done
		echo -e "VitalPBX Monitor: Started on " $host_slave
		echo -e "Done"

		fail2ban=`pcs status resources | awk '/fail2ban/ {print $3}'`
        	while [[ $fail2ban != 'Started' ]]
        	do
                	fail2ban=`pcs status resources | awk '/fail2ban/ {print $3}'`
        	done
		echo -e "fail2ban: Started on " $host_slave
		echo -e "Done"

		pcs cluster unstandby $host_master
		sleep 3
		echo -e "Done,"
		pcs status
	else
		echo -e "Nothing to do, bye, bye"
	fi
